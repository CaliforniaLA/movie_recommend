user:
id,account,username,passwd,regist_time,email,phone,
news:
id,user_id,pub_date,content
guest_book:
id,user_id,content,pub_date,
movie:
id,name,category,director,actor,genre,views,score,release_date,country
movie_eva:
id,movie_id,user_id,score,comment,eva_date
movie_category:
id,category,create_date,desc


后台功能描述：
（1）电影分类管理模块：主要实现新增电影分类和分类描述功能，管理人员通过分类管理实现电影的分类，同时可以增加、修改、删除电影信息。
（2）会员信息管理模块：对会员信息进行管理，包括查询、删除会员的相关信息。
（3）评论区管理模块：对会员留言评论信息进行管理，包括查看、删除留言信息等。
（4）管理员管理模块：对管理员信息进行管理，包括查看、修改用户名和密码。
（5）投票管理模块：对会员的投票信息进行统计。
（6）新闻公告模块：对最新资讯进行管理，包括添加和删除。
（7）推荐电影管理模块：设置最小支持度和最小可信度，执行分析。支持度就是所有我们分析的交易中，某两种（若干种）商品同时被购买的概率（比率），置信度就是根据某一个条件，得到一个结论的可信程度、可靠程度。
前台功能描述：
（1）会员模块：当用户进入首页时，点击注册，填写会员注册资料。
（2）查看榜单电影：未注册的用户和会员均可以使用该模块，查看网站提供的排行榜电影信息，如主演、导演、类型、浏览次数等。
（3）电影搜索模块：已登录的会员和未注册的用户均可以通过该模块进行搜索查询，输入关键字，搜索出该网站上的电影及相关信息。
（4）投票模块：已登录过的用户可参加从何种途径知道该网站的投票。
（5）顾客留言模块：登陆过的顾客可在此模块中进行评论留言，发表自己对电影的看法。
（6）评分模块：登陆过的用户可以对自己观看的影片进行评分（十分制），根据所评会员的平均分数的排名用于动态刷新排行榜上的电影排名次序。
（7）观看模块：未注册的用户只可以进行3分钟左右的试看。会员可以观看网站内的电影，还可以下载。
（8）个人电影推荐功能：根据Aprior关联算法，根据设置的最小支持度和最小可信度向会员推荐可能喜欢的电影，
    该算法的思想是：首先必须先从资料集合中找出所有的高频项目组，再由这些高频项目组中产生关联规则。
    Apriori关联算法有两个定律:
        定律1)：如果一个集合是频繁项集，则它的所有子集都是频繁项集。
        定律2)：如果一个集合不是频繁项集，则它的所有超集都不是频繁项集。


{%  if current_user.is_authenticated %}
    {{ current_user.password }}
{% endif %}
create table guest_book
(
	id int auto_increment
		primary key,
	pub_date datetime null,
	content varchar(400) null,
	user_id int null
)
engine=InnoDB
;

create index user_id
	on guest_book (user_id)
;

create table movie
(
	id int auto_increment
		primary key,
	name varchar(120) null,
	genre varchar(120) null,
	actor varchar(120) null,
	director varchar(120) null,
	views int null,
	country varchar(20) null,
	score float null,
	add_date datetime null,
	video_path varchar(200) default '/static/video/test.mp4' null,
	collect_num int default '0' null,
	eva_num int default '0' null
)
engine=InnoDB
;

create table movie_cat_re
(
	id int auto_increment
		primary key,
	movie_id int null,
	movie_cat_id int null,
	constraint movie_cat_re_movie_id_fk
		foreign key (movie_id) references movie (id)
)
engine=InnoDB
;

create index movie_cat_re_movie_id_fk
	on movie_cat_re (movie_id)
;

create index movie_cat_re_movie_category_id_fk2
	on movie_cat_re (movie_cat_id)
;

create table movie_category
(
	id int auto_increment
		primary key,
	create_date datetime null,
	category varchar(20) null,
	`desc` varchar(800) null
)
engine=InnoDB
;

alter table movie_cat_re
	add constraint movie_cat_re_movie_category_id_fk2
		foreign key (movie_cat_id) references movie_category (id)
;

create table movie_eva
(
	id int auto_increment
		primary key,
	eva_date datetime null,
	comment varchar(120) null,
	score float null,
	user_id int null,
	movie_id int null,
	constraint movie_eva_ibfk_2
		foreign key (movie_id) references movie (id)
)
engine=InnoDB
;

create index user_id
	on movie_eva (user_id)
;

create index movie_id
	on movie_eva (movie_id)
;

create table news
(
	id int auto_increment
		primary key,
	pub_date datetime null,
	content varchar(4000) null,
	user_id int null,
	title varchar(120) null
)
engine=InnoDB
;

create index user_id
	on news (user_id)
;

create table qa
(
	id int auto_increment
		primary key,
	sex varchar(5) null,
	favorite_genre varchar(5) null,
	score int default '1' null,
	from_where varchar(10) null,
	suggest varchar(300) null,
	submit_date datetime null
)
comment 'question answer' engine=InnoDB
;

create table user
(
	id int auto_increment
		primary key,
	username varchar(32) null,
	account varchar(32) null,
	password varchar(128) null,
	register_date datetime null,
	email varchar(32) null,
	phone varchar(32) null,
	is_admin tinyint(1) default '0' null,
	is_freeze tinyint(1) default '0' null,
	constraint account
		unique (account)
)
engine=InnoDB
;

alter table guest_book
	add constraint guest_book_ibfk_1
		foreign key (user_id) references user (id)
;

alter table movie_eva
	add constraint movie_eva_ibfk_1
		foreign key (user_id) references user (id)
;

alter table news
	add constraint news_ibfk_1
		foreign key (user_id) references user (id)
;

create table user_collection
(
	id int auto_increment
		primary key,
	user_id int not null,
	movie_id int null,
	collect_date datetime null,
	mark varchar(300) null,
	constraint user_collection_user_id_fk
		foreign key (user_id) references user (id),
	constraint user_collection___fk2
		foreign key (movie_id) references movie (id)
)
engine=InnoDB
;

create index user_collection_user_id_fk
	on user_collection (user_id)
;

create index user_collection___fk2
	on user_collection (movie_id)
;

